module utils

imports include/SpoofaxTest
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/SpoofaxTest
  lib/editor-common.generated
  lib/Entity
strategies

	generate-yuml-syntax:
		(selected, position, ast, path, project-path) -> (filename, result-string)
        with
          filename := <guarantee-extension(|"yuml")> path;
          result-string := <declare;remove-extra-fields;remove-some-cons;
			rw;remove-redundant-fields;pp-yuml> selected
          
          	
	show-pretty-printed-yuml :
		(selected, position, ast, path, project-path) -> (filename, result-string)
        with
          filename := <guarantee-extension(|"ayuml")> path;
          result-string := <pp-yuml> selected

          
    rules
		pp-yuml = alltd(pp)

		pp : Diagram(def*) -> <map(pp); concat-strings>def*
		pp : Definition(ent) -> $[[<pp>ent]
		]
		pp : Definition(ent,con, ent2) -> $[[<pp>ent ][<pp>con][<pp>ent2]
		]
		pp : Class(str) -> $[$[$[<pp> str]$]$]
		pp : ClassFields(field*,fld) -> $[|[<map(pp);concat-strings>field*] [fld] ]	
		pp : ClassFields(field*) -> $[|[<map(pp);concat-strings>field*]]
		// pp : Field(field*) -> $[[<map(pp);concat-strings>field*]; ]
		pp : Field(field*) -> $[[<map(pp);concat-strings>field*];]
		pp : SingleField(f) -> $[[" "][f]]
		pp : ClassDefinition(nme, splash, prop*) -> $[[nme][<pp>splash][<map(pp);concat-strings>prop*]]
		pp : Splash(color) -> $[{bg:[color]} ]
		pp : Connection(lblLeft*, relLeft, cardLeft, connector,cardRight, relRight , lblRight*) ->
						 $[[<map(pp);concat-strings>lblLeft*][<pp>relLeft][<pp>cardLeft][<pp>connector][<pp>cardRight][<pp>relRight][<map(pp);concat-strings>lblRight*]]
		
					 
		pp : LeftRelation() 		-> $[<]
		pp : RightRelation() 		-> $[>]
		pp : Connector()			-> $[-]
		pp : Dependency()			-> $[-.-]
		pp : Inheritance()			-> $[^]
		pp : Aggregation()			-> $[<>]
		pp : Composition()			-> $[++]

		pp : Note(note*)			-> $[$[$note:[<map(pp);concat-strings>note*]$]$]
		pp : NoteToken(token)		-> $[[token][" "]]
		pp : Label(lbl)				-> lbl
		pp : Cardinality(card)		-> card
		pp : Some(str) -> <pp>str
		pp : None() -> $[]
		pp : [t] -> $[[<pp>t]]
		pp : [] -> $[]
		pp : t* -> <map(pp)> t*
		pp : (t,c) -> $[[<pp>t][<pp>c]]


	generate-yuml-aterm :
		(selected, position, ast, path, project-path) -> (filename, result-string)
        with
          filename := <guarantee-extension(|"yast")> path;
		result-string := <declare;remove-extra-fields;remove-some-cons;rw;remove-redundant-fields> selected
	rules
		declare = alltd(declare-entity)

		declare-entity:
			e@Entity(name, t , prop*)-> e
				with debug(!100);say(!"Hello"); <filter(inv(|name))>prop*


    	inv(|from) : ref@Reference(var, Type(type), iv@Some(Inverse(Type(invType), invVar))) ->  ref
    		with debug(!101); key:=<concat-strings> [invType,"_",invVar];say(!key); rules (IsInverse: key ->  Some(LeftRelation()))  
    	inv(|from) : comp@Composition(var, Type(type), iv@Some(Inverse(Type(invType), invVar))) ->  comp
    		with debug(!102); key:=<concat-strings> [invType,"_",invVar];say(!key); rules (IsInverse: key ->  Some(Composition()))  

		
		remove-extra-fields =  rem-non-inv

		rem-non-inv : Module(t1, t2*) -> Module(t1, <map(rem-non-inv)>t2*)
		rem-non-inv : 
			e@Entity(name, t , prop*)-> Entity(name, t , <filter(not(non-inv(|name)))>prop*)

		non-inv(|from) : ref@Reference(var, type, None()) -> ref
    		 where debug(!230);key:=<concat-strings>[from,"_",var]; value := <IsInverse>key; say(!value); rules (GetRelation: key -> Some(RightRelation()))
		non-inv(|from) : comp@Composition(var, type, None()) -> comp
    		 where debug(!231);key:=<concat-strings>[from,"_",var]; value := <IsInverse>key; say(!value); rules (GetRelation: key -> Some(Composition()))
			

    rules
    	 remove-some-cons = topdown(try(\Some(x) -> x\))
    	 remove-redundant-fields = topdown(try(\[ClassFields([])]->[]\))
    	// rewrite = rw
    	rw :Module(name, t*) -> result 
    		with debug(!1);  result := Diagram(<map(rw);flatten-list()>t*)
    	
    	 rw : Entity(name,None(),prop*) -> result
    		 with debug(!"0 "); result :=[ 
    		 	Definition(Class(ClassDefinition(name, None(), [ClassFields(<filter(vl)>prop*)]))),
				 <filter(ent(|name))>prop*     		 	
    		 	]

		rw : Entity(name, SuperType(Type(super)) , prop*) -> result
			with result := [
				Definition(Class(ClassDefinition(name, None(),  [ClassFields(<filter(vl)>prop*)]))), 
				Definition( Class(ClassDefinition(super, None(), [])),Inheritance() ,Class(ClassDefinition(name, None(),[]))),
				 <filter(ent(|name))>prop* 
			] 
    	 
    	vl: Value(val ,Type(t)) -> Field([SingleField(val)])

//***********************REFERENCE    ***********************
    	ent(|from) : Reference(var, Type(type), None()) ->  result
    		 where debug(!3 ); result:= Definition(Class(ClassDefinition(from, None(),[])) , <rw>Reference(var,Type(type),None()) , Class(ClassDefinition(type, None(), []))) 

    	ent(|from) : Reference(var, Type(type), inverse@Inverse(Type(invType), invVar)) ->  result
    		 where debug(!255 );result:= Definition(Class(ClassDefinition(from, None(),[])) , <rw>Reference(var,Type(type),inverse) , Class(ClassDefinition(type, None(), []))) 


		rw : Reference(var, Type(type), None()) ->  Connection([Label(var)], None(), None(), Connector(), None(), Some(RightRelation()), [])
		rw : Reference(var, Type(type), Inverse(Type(invType), invVar)) -> result
			where debug(!"265 ");
				key:=<concat-strings>[invType,"_",invVar];say(!key); value := <GetRelation>key; say(!"Value Found");
				result:= Connection([Label(var)], Some(LeftRelation()), None(), Connector(), None(), Some(value), [Label(invVar)])


    	ent(|from) : Reference(var, SetType(Type(set),Type(type)), None()) ->  result
    		with debug(!4 ); result:= Definition(Class(ClassDefinition(from, None(),[])) , <rw>Reference(var,SetType(Type(set),Type(type)),None()) , Class(ClassDefinition(type, None(), []))) 

		rw : Reference(var, SetType(Type(set),type), None()) -> result
			with debug(!5); result:= Connection([Label(var)], None(), None(), Connector(), None(), Some(RightRelation()), [Label("*")])
//***********************Composition    ***********************

    	ent(|from) : Composition(var, Type(type),None()) ->  result
    		with debug(!6 ); result:= Definition(Class(ClassDefinition(from, None(),[])) , <rw>Composition(var,Type(type),None()) , Class(ClassDefinition(type, None(), []))) 

    	ent(|from) : Composition(var, Type(type), inverse@Inverse(Type(invType), invVar)) ->  result
    		 where debug(!250 );result:= Definition(Class(ClassDefinition(from, None(),[])) , <rw>Composition(var,Type(type),inverse) , Class(ClassDefinition(type, None(), []))) 


		rw : Composition(var, Type(type),None()) ->  Connection([Label(var)], Some(Composition()), None(), Connector(), None(), None(), [])
		rw : Composition(var, Type(type), Inverse(Type(invType), invVar)) -> result
			where debug(!"265 ");
				key:=<concat-strings>[invType,"_",invVar];say(!key); value := <GetRelation>key; say(!"Comp Value Found");
				result:= Connection([Label(var)], Some(value), None(), Connector(), None(), Some(Composition()), [Label(invVar)])

    	ent(|from) : Composition(var,  SetType(Type(set),type),None()) ->  result
    		with debug(!7 ); result:= Definition(Class(ClassDefinition(from, None(),[])) , <rw>Composition(var,SetType(Type(set),type),None()) , Class(ClassDefinition(type, None(), []))) 

		rw : Composition(var,  SetType(Type(set),type),None()) ->  Connection([Label(var)], Some(Composition()), None(), Connector(), None(), None(), [Label("*")])

